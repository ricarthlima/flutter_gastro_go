// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_gastro_go/test/mocks/app_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/material.dart' as _i17;
import 'package:flutter_gastro_go/features/dish/domain/entities/dish_dto.dart'
    as _i12;
import 'package:flutter_gastro_go/features/dish/domain/usecases/usecases.dart'
    as _i13;
import 'package:flutter_gastro_go/features/dish/presentation/stores/dish_list_state.dart'
    as _i11;
import 'package:flutter_gastro_go/features/dish/presentation/stores/dish_list_store.dart'
    as _i10;
import 'package:flutter_gastro_go/features/favorite/presentation/stores/favorites_state.dart'
    as _i15;
import 'package:flutter_gastro_go/features/favorite/presentation/stores/favorites_store.dart'
    as _i14;
import 'package:flutter_gastro_go/features/restaurant/domain/entities/restaurant_dto.dart'
    as _i6;
import 'package:flutter_gastro_go/features/restaurant/domain/usecases/usecases.dart'
    as _i8;
import 'package:flutter_gastro_go/features/restaurant/presentation/stores/restaurant_list_state.dart'
    as _i5;
import 'package:flutter_gastro_go/features/restaurant/presentation/stores/restaurant_list_store.dart'
    as _i4;
import 'package:flutter_gastro_go/features/settings/data/repositories/i_settings_repository.dart'
    as _i3;
import 'package:flutter_gastro_go/features/settings/domain/stores/theme_store.dart'
    as _i16;
import 'package:mobx/mobx.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeObservableList_0<T> extends _i1.SmartFake
    implements _i2.ObservableList<T> {
  _FakeObservableList_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeReactiveContext_1 extends _i1.SmartFake
    implements _i2.ReactiveContext {
  _FakeReactiveContext_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeObservableSet_2<T> extends _i1.SmartFake
    implements _i2.ObservableSet<T> {
  _FakeObservableSet_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeISettingsRepository_3 extends _i1.SmartFake
    implements _i3.ISettingsRepository {
  _FakeISettingsRepository_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [RestaurantListStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantListStore extends _i1.Mock
    implements _i4.RestaurantListStore {
  @override
  _i5.RestaurantListState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i5.RestaurantListState.initial,
            returnValueForMissingStub: _i5.RestaurantListState.initial,
          )
          as _i5.RestaurantListState);

  @override
  _i2.ObservableList<_i6.RestaurantDto> get restaurants =>
      (super.noSuchMethod(
            Invocation.getter(#restaurants),
            returnValue: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#restaurants),
            ),
            returnValueForMissingStub: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#restaurants),
            ),
          )
          as _i2.ObservableList<_i6.RestaurantDto>);

  @override
  String get nameQuery =>
      (super.noSuchMethod(
            Invocation.getter(#nameQuery),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#nameQuery),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#nameQuery),
            ),
          )
          as String);

  @override
  String get categoryQuery =>
      (super.noSuchMethod(
            Invocation.getter(#categoryQuery),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#categoryQuery),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#categoryQuery),
            ),
          )
          as String);

  @override
  String get selectedCategory =>
      (super.noSuchMethod(
            Invocation.getter(#selectedCategory),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#selectedCategory),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#selectedCategory),
            ),
          )
          as String);

  @override
  double get minRating =>
      (super.noSuchMethod(
            Invocation.getter(#minRating),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  double get maxDistance =>
      (super.noSuchMethod(
            Invocation.getter(#maxDistance),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  bool get filterVegan =>
      (super.noSuchMethod(
            Invocation.getter(#filterVegan),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i8.SortType get sortType =>
      (super.noSuchMethod(
            Invocation.getter(#sortType),
            returnValue: _i8.SortType.byRating,
            returnValueForMissingStub: _i8.SortType.byRating,
          )
          as _i8.SortType);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(
            Invocation.getter(#hasError),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set state(_i5.RestaurantListState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  set errorMessage(String? value) => super.noSuchMethod(
    Invocation.setter(#errorMessage, value),
    returnValueForMissingStub: null,
  );

  @override
  set restaurants(_i2.ObservableList<_i6.RestaurantDto>? value) =>
      super.noSuchMethod(
        Invocation.setter(#restaurants, value),
        returnValueForMissingStub: null,
      );

  @override
  set nameQuery(String? value) => super.noSuchMethod(
    Invocation.setter(#nameQuery, value),
    returnValueForMissingStub: null,
  );

  @override
  set categoryQuery(String? value) => super.noSuchMethod(
    Invocation.setter(#categoryQuery, value),
    returnValueForMissingStub: null,
  );

  @override
  set selectedCategory(String? value) => super.noSuchMethod(
    Invocation.setter(#selectedCategory, value),
    returnValueForMissingStub: null,
  );

  @override
  set minRating(double? value) => super.noSuchMethod(
    Invocation.setter(#minRating, value),
    returnValueForMissingStub: null,
  );

  @override
  set maxDistance(double? value) => super.noSuchMethod(
    Invocation.setter(#maxDistance, value),
    returnValueForMissingStub: null,
  );

  @override
  set filterVegan(bool? value) => super.noSuchMethod(
    Invocation.setter(#filterVegan, value),
    returnValueForMissingStub: null,
  );

  @override
  set sortType(_i8.SortType? value) => super.noSuchMethod(
    Invocation.setter(#sortType, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i2.ReactiveContext);

  @override
  _i9.Future<void> loadRestaurants() =>
      (super.noSuchMethod(
            Invocation.method(#loadRestaurants, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setNameQuery(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#setNameQuery, [query]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setCategoryQuery(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#setCategoryQuery, [query]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setSelectedCategory(String? category) =>
      (super.noSuchMethod(
            Invocation.method(#setSelectedCategory, [category]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setRating(double? rating) =>
      (super.noSuchMethod(
            Invocation.method(#setRating, [rating]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setDistance(double? distance) =>
      (super.noSuchMethod(
            Invocation.method(#setDistance, [distance]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> toggleVeganFilter(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#toggleVeganFilter, [value]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setSort(_i8.SortType? type) =>
      (super.noSuchMethod(
            Invocation.method(#setSort, [type]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [DishListStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockDishListStore extends _i1.Mock implements _i10.DishListStore {
  @override
  _i11.DishListState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i11.DishListState.initial,
            returnValueForMissingStub: _i11.DishListState.initial,
          )
          as _i11.DishListState);

  @override
  _i2.ObservableList<_i12.DishDto> get dishes =>
      (super.noSuchMethod(
            Invocation.getter(#dishes),
            returnValue: _FakeObservableList_0<_i12.DishDto>(
              this,
              Invocation.getter(#dishes),
            ),
            returnValueForMissingStub: _FakeObservableList_0<_i12.DishDto>(
              this,
              Invocation.getter(#dishes),
            ),
          )
          as _i2.ObservableList<_i12.DishDto>);

  @override
  String get searchQuery =>
      (super.noSuchMethod(
            Invocation.getter(#searchQuery),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#searchQuery),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#searchQuery),
            ),
          )
          as String);

  @override
  bool get filterVegan =>
      (super.noSuchMethod(
            Invocation.getter(#filterVegan),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i13.SortDishType get sortType =>
      (super.noSuchMethod(
            Invocation.getter(#sortType),
            returnValue: _i13.SortDishType.byPrice,
            returnValueForMissingStub: _i13.SortDishType.byPrice,
          )
          as _i13.SortDishType);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasError =>
      (super.noSuchMethod(
            Invocation.getter(#hasError),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isEmpty =>
      (super.noSuchMethod(
            Invocation.getter(#isEmpty),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  set state(_i11.DishListState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  set errorMessage(String? value) => super.noSuchMethod(
    Invocation.setter(#errorMessage, value),
    returnValueForMissingStub: null,
  );

  @override
  set dishes(_i2.ObservableList<_i12.DishDto>? value) => super.noSuchMethod(
    Invocation.setter(#dishes, value),
    returnValueForMissingStub: null,
  );

  @override
  set searchQuery(String? value) => super.noSuchMethod(
    Invocation.setter(#searchQuery, value),
    returnValueForMissingStub: null,
  );

  @override
  set filterVegan(bool? value) => super.noSuchMethod(
    Invocation.setter(#filterVegan, value),
    returnValueForMissingStub: null,
  );

  @override
  set sortType(_i13.SortDishType? value) => super.noSuchMethod(
    Invocation.setter(#sortType, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i2.ReactiveContext);

  @override
  _i9.Future<void> loadDishes(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#loadDishes, [restaurantId]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setSearchQuery(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#setSearchQuery, [query]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> toggleVeganFilter(bool? value) =>
      (super.noSuchMethod(
            Invocation.method(#toggleVeganFilter, [value]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> setSort(_i13.SortDishType? type) =>
      (super.noSuchMethod(
            Invocation.method(#setSort, [type]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [FavoritesStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesStore extends _i1.Mock implements _i14.FavoritesStore {
  @override
  _i15.FavoritesState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _i15.FavoritesState.initial,
            returnValueForMissingStub: _i15.FavoritesState.initial,
          )
          as _i15.FavoritesState);

  @override
  _i2.ObservableList<_i6.RestaurantDto> get favoriteRestaurants =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteRestaurants),
            returnValue: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#favoriteRestaurants),
            ),
            returnValueForMissingStub: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#favoriteRestaurants),
            ),
          )
          as _i2.ObservableList<_i6.RestaurantDto>);

  @override
  _i2.ObservableList<_i12.DishDto> get favoriteDishes =>
      (super.noSuchMethod(
            Invocation.getter(#favoriteDishes),
            returnValue: _FakeObservableList_0<_i12.DishDto>(
              this,
              Invocation.getter(#favoriteDishes),
            ),
            returnValueForMissingStub: _FakeObservableList_0<_i12.DishDto>(
              this,
              Invocation.getter(#favoriteDishes),
            ),
          )
          as _i2.ObservableList<_i12.DishDto>);

  @override
  _i2.ObservableList<_i6.RestaurantDto> get allRestaurants =>
      (super.noSuchMethod(
            Invocation.getter(#allRestaurants),
            returnValue: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#allRestaurants),
            ),
            returnValueForMissingStub: _FakeObservableList_0<_i6.RestaurantDto>(
              this,
              Invocation.getter(#allRestaurants),
            ),
          )
          as _i2.ObservableList<_i6.RestaurantDto>);

  @override
  _i2.ObservableSet<String> get restaurantFavoriteIds =>
      (super.noSuchMethod(
            Invocation.getter(#restaurantFavoriteIds),
            returnValue: _FakeObservableSet_2<String>(
              this,
              Invocation.getter(#restaurantFavoriteIds),
            ),
            returnValueForMissingStub: _FakeObservableSet_2<String>(
              this,
              Invocation.getter(#restaurantFavoriteIds),
            ),
          )
          as _i2.ObservableSet<String>);

  @override
  _i2.ObservableSet<String> get dishFavoriteIds =>
      (super.noSuchMethod(
            Invocation.getter(#dishFavoriteIds),
            returnValue: _FakeObservableSet_2<String>(
              this,
              Invocation.getter(#dishFavoriteIds),
            ),
            returnValueForMissingStub: _FakeObservableSet_2<String>(
              this,
              Invocation.getter(#dishFavoriteIds),
            ),
          )
          as _i2.ObservableSet<String>);

  @override
  set state(_i15.FavoritesState? value) => super.noSuchMethod(
    Invocation.setter(#state, value),
    returnValueForMissingStub: null,
  );

  @override
  set errorMessage(String? value) => super.noSuchMethod(
    Invocation.setter(#errorMessage, value),
    returnValueForMissingStub: null,
  );

  @override
  set favoriteRestaurants(_i2.ObservableList<_i6.RestaurantDto>? value) =>
      super.noSuchMethod(
        Invocation.setter(#favoriteRestaurants, value),
        returnValueForMissingStub: null,
      );

  @override
  set favoriteDishes(_i2.ObservableList<_i12.DishDto>? value) =>
      super.noSuchMethod(
        Invocation.setter(#favoriteDishes, value),
        returnValueForMissingStub: null,
      );

  @override
  set allRestaurants(_i2.ObservableList<_i6.RestaurantDto>? value) =>
      super.noSuchMethod(
        Invocation.setter(#allRestaurants, value),
        returnValueForMissingStub: null,
      );

  @override
  set restaurantFavoriteIds(_i2.ObservableSet<String>? value) =>
      super.noSuchMethod(
        Invocation.setter(#restaurantFavoriteIds, value),
        returnValueForMissingStub: null,
      );

  @override
  set dishFavoriteIds(_i2.ObservableSet<String>? value) => super.noSuchMethod(
    Invocation.setter(#dishFavoriteIds, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i2.ReactiveContext);

  @override
  bool isRestaurantFavorite(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#isRestaurantFavorite, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isDishFavorite(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#isDishFavorite, [id]),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i9.Future<void> loadAllFavoriteIds() =>
      (super.noSuchMethod(
            Invocation.method(#loadAllFavoriteIds, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> loadFavoritesScreenData() =>
      (super.noSuchMethod(
            Invocation.method(#loadFavoritesScreenData, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> toggleRestaurantFavorite(String? restaurantId) =>
      (super.noSuchMethod(
            Invocation.method(#toggleRestaurantFavorite, [restaurantId]),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  _i9.Future<void> toggleDishFavorite({
    required String? dishId,
    String? restaurantId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#toggleDishFavorite, [], {
              #dishId: dishId,
              #restaurantId: restaurantId,
            }),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);
}

/// A class which mocks [ThemeStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeStore extends _i1.Mock implements _i16.ThemeStore {
  @override
  _i3.ISettingsRepository get settingsRepository =>
      (super.noSuchMethod(
            Invocation.getter(#settingsRepository),
            returnValue: _FakeISettingsRepository_3(
              this,
              Invocation.getter(#settingsRepository),
            ),
            returnValueForMissingStub: _FakeISettingsRepository_3(
              this,
              Invocation.getter(#settingsRepository),
            ),
          )
          as _i3.ISettingsRepository);

  @override
  bool get isDarkTheme =>
      (super.noSuchMethod(
            Invocation.getter(#isDarkTheme),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i17.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i17.ThemeMode.system,
            returnValueForMissingStub: _i17.ThemeMode.system,
          )
          as _i17.ThemeMode);

  @override
  set isDarkTheme(bool? value) => super.noSuchMethod(
    Invocation.setter(#isDarkTheme, value),
    returnValueForMissingStub: null,
  );

  @override
  _i2.ReactiveContext get context =>
      (super.noSuchMethod(
            Invocation.getter(#context),
            returnValue: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
            returnValueForMissingStub: _FakeReactiveContext_1(
              this,
              Invocation.getter(#context),
            ),
          )
          as _i2.ReactiveContext);

  @override
  _i9.Future<void> onLoad() =>
      (super.noSuchMethod(
            Invocation.method(#onLoad, []),
            returnValue: _i9.Future<void>.value(),
            returnValueForMissingStub: _i9.Future<void>.value(),
          )
          as _i9.Future<void>);

  @override
  void onSave() => super.noSuchMethod(
    Invocation.method(#onSave, []),
    returnValueForMissingStub: null,
  );

  @override
  void setDarkTheme(bool? value) => super.noSuchMethod(
    Invocation.method(#setDarkTheme, [value]),
    returnValueForMissingStub: null,
  );

  @override
  void toggleDarkTheme() => super.noSuchMethod(
    Invocation.method(#toggleDarkTheme, []),
    returnValueForMissingStub: null,
  );
}

// Mocks generated by Mockito 5.4.6 from annotations
// in flutter_gastro_go/test/features/dish/domain/filter_dishes_by_vegan_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_gastro_go/features/dish/data/repositories/i_dish_repository.dart'
    as _i3;
import 'package:flutter_gastro_go/features/dish/domain/entities/dish_dto.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeDishDto_0 extends _i1.SmartFake implements _i2.DishDto {
  _FakeDishDto_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [IDishRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIDishRepository extends _i1.Mock implements _i3.IDishRepository {
  @override
  _i4.Future<List<_i2.DishDto>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i4.Future<List<_i2.DishDto>>.value(<_i2.DishDto>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.DishDto>>.value(
              <_i2.DishDto>[],
            ),
          )
          as _i4.Future<List<_i2.DishDto>>);

  @override
  _i4.Future<_i2.DishDto> getById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getById, [id]),
            returnValue: _i4.Future<_i2.DishDto>.value(
              _FakeDishDto_0(this, Invocation.method(#getById, [id])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.DishDto>.value(
              _FakeDishDto_0(this, Invocation.method(#getById, [id])),
            ),
          )
          as _i4.Future<_i2.DishDto>);

  @override
  _i4.Future<List<_i2.DishDto>> getByRestaurantId({
    required String? restaurantId,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getByRestaurantId, [], {
              #restaurantId: restaurantId,
            }),
            returnValue: _i4.Future<List<_i2.DishDto>>.value(<_i2.DishDto>[]),
            returnValueForMissingStub: _i4.Future<List<_i2.DishDto>>.value(
              <_i2.DishDto>[],
            ),
          )
          as _i4.Future<List<_i2.DishDto>>);
}
